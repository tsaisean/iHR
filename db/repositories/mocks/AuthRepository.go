// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "iHR/db/model"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: auth
func (_m *AuthRepository) CreateAuth(auth *model.Auth) error {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Auth) error); ok {
		r0 = rf(auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAuth provides a mock function with given fields: userID
func (_m *AuthRepository) GetAuth(userID uint) (*model.Auth, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAuth")
	}

	var r0 *model.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*model.Auth, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Auth); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateAuth provides a mock function with given fields: userID
func (_m *AuthRepository) InvalidateAuth(userID uint) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

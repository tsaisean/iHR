// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "iHR/repositories/model"

	mock "github.com/stretchr/testify/mock"
)

// LeaveRepository is an autogenerated mock type for the LeaveRepository type
type LeaveRepository struct {
	mock.Mock
}

// CreateLeaveBalance provides a mock function with given fields: balance
func (_m *LeaveRepository) CreateLeaveBalance(balance *model.LeaveBalances) (*model.LeaveBalances, error) {
	ret := _m.Called(balance)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeaveBalance")
	}

	var r0 *model.LeaveBalances
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.LeaveBalances) (*model.LeaveBalances, error)); ok {
		return rf(balance)
	}
	if rf, ok := ret.Get(0).(func(*model.LeaveBalances) *model.LeaveBalances); ok {
		r0 = rf(balance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LeaveBalances)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.LeaveBalances) error); ok {
		r1 = rf(balance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLeaveRequest provides a mock function with given fields: request
func (_m *LeaveRepository) CreateLeaveRequest(request *model.LeaveRequest) (*model.LeaveRequest, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeaveRequest")
	}

	var r0 *model.LeaveRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.LeaveRequest) (*model.LeaveRequest, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*model.LeaveRequest) *model.LeaveRequest); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LeaveRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.LeaveRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllLeaveRequests provides a mock function with given fields: employeeID
func (_m *LeaveRepository) GetAllLeaveRequests(employeeID uint) ([]model.LeaveRequest, error) {
	ret := _m.Called(employeeID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLeaveRequests")
	}

	var r0 []model.LeaveRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]model.LeaveRequest, error)); ok {
		return rf(employeeID)
	}
	if rf, ok := ret.Get(0).(func(uint) []model.LeaveRequest); ok {
		r0 = rf(employeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LeaveRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLeaveBalance provides a mock function with given fields: id, updated
func (_m *LeaveRepository) UpdateLeaveBalance(id uint, updated *model.LeaveBalances) (*model.LeaveBalances, error) {
	ret := _m.Called(id, updated)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLeaveBalance")
	}

	var r0 *model.LeaveBalances
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *model.LeaveBalances) (*model.LeaveBalances, error)); ok {
		return rf(id, updated)
	}
	if rf, ok := ret.Get(0).(func(uint, *model.LeaveBalances) *model.LeaveBalances); ok {
		r0 = rf(id, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LeaveBalances)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *model.LeaveBalances) error); ok {
		r1 = rf(id, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLeaveRequest provides a mock function with given fields: id, updated
func (_m *LeaveRepository) UpdateLeaveRequest(id uint, updated *model.LeaveRequest) (*model.LeaveRequest, error) {
	ret := _m.Called(id, updated)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLeaveRequest")
	}

	var r0 *model.LeaveRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *model.LeaveRequest) (*model.LeaveRequest, error)); ok {
		return rf(id, updated)
	}
	if rf, ok := ret.Get(0).(func(uint, *model.LeaveRequest) *model.LeaveRequest); ok {
		r0 = rf(id, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LeaveRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *model.LeaveRequest) error); ok {
		r1 = rf(id, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLeaveRepository creates a new instance of LeaveRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLeaveRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LeaveRepository {
	mock := &LeaveRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
